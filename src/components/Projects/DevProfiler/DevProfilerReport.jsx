const DevProfilerReport = () => {
  return (
    <>
      <div>
        {reportList.map((item) => (
          <div key={item.id} className="my-4">
            {item.description}
          </div>
        ))}
      </div>
    </>
  );
};

const reportList = [
  {
    id: 0,
    description:
      "애초에 기존에 진행 중이던 단어장 개인 프로젝트를 통해서도 충분히 해당 내용들을 적용시킬 수 있었지만, 새로운 프로젝트를 하게 된 여러 가지 이유가 있습니다.",
  },
  {
    id: 1,
    description:
      "첫째로, 기존의 개인 프로젝트는 완성도가 낮고 코드가 깔끔하지 못해서 그렇지, 사실상 내부적으로 꽤 복잡한 로직을 가질 수밖에 없는 구조라서, 빠른 시일 내에(사실 시간이 없었음) 내가 공부하고자 하는 부분들을 모두 적용시키는 데에는 무리가 있었습니다.",
  },
  {
    id: 2,
    description:
      "그렇기 때문에 처음부터 다시 시작하더라도, 새로운 주제를 가지고 쾌적한 환경에서 공부하는 게 낫다고 판단했고, 약 1주일 남짓 한 시간 내에 공부 외에도 완성까지 시키기에 적당한 매우 간단한 프로젝트를 구상한 결과가 이 프로젝트입니다.",
  },
  {
    id: 3,
    description:
      "우선 NestJS에 대한 공부가 가장 큰 목적이기도 했지만, 어쨌든 기존 프로젝트에서 트러블이 있었고, 꼭 해결하고자 하는 부분이 있었으니, 그게 바로 계층형 아키텍처에 대한 부분이었습니다.",
  },
  {
    id: 4,
    description:
      "아무래도 CRUD를 통한 기능 구현이 우선순위였기 때문에, Express에서 단순 서버와 DB로만 이루어진 2TIER 구조로 개발하다보니 코드가 매우 지저분해지기 시작했습니다.",
  },
  {
    id: 5,
    description:
      "그래서 코드의 유지보수를 위해 구조 설계에 대해 찾아보고, MVC패턴과 계층형 아키텍처에 대해 공부하게 되었고, Express버전과 NestJS버전 모두에 적용시키게 되었습니다.",
  },
  {
    id: 6,
    description:
      "결과적으로 컨트롤러, 서비스, 리포지토리 3계층 구조로 관심사를 분리한 객체 지향적인 아키텍처를 구성하였습니다. ",
  },
  {
    id: 7,
    description:
      "그리고 DTO와 의존성 주입을 통해 조금 더 관심사와 계층간 역할을 확실하게 분리하였습니다.",
  },
  {
    id: 8,
    description:
      "추가적으로 Swagger를 통한 문서화, Jest를 통한 테스트 구축 등을 처음으로 도입해보게 되었습니다.",
  },
];

export default DevProfilerReport;
